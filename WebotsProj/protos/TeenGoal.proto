# The Goal proto correspond to the goals used in the Robocup 2008
# Standard Platform League, Nao division.
# The color of the goal and the support polygons can be modified.
#
# Author: 15 FEB 2008: Çetin Meriçli <cetin.mericli@boun.edu.tr>
# on behalf of SPL TC and OC <spl_tech@tzi.de>,<spl_orga@tzi.de>
# Modified: 12 JUNE 2008: added a bounding object for the net
# Modified: 29 OCTOBER 2009: Reviewed by Yvan Bourquin - www.cyberbotics.com
#  -merged various IndexFaceSet for better performance
#  -fixed unwanted black color in support triangles
# Modified: 22 APRIL 2010: by Yvan Bourquin - www.cyberbotics.com
#  -modified to hold net 350 mm back from posts (according to SPL 2010 specs)
#  -removed unused Shapes/Materials in boundingObject
#
#  NSL goal: 80 by 150 (inner size)
#
#


PROTO TeenGoal [
  field SFVec3f translation 0 0 0
  field SFRotation rotation 0 1 0 0
  field SFFloat postRadius 0.05
  field SFColor postColor 1 1 1
  field SFColor netColor 1 1 1
  field SFColor supportColor 1 1 1
  field SFBool locked TRUE
]
{
Solid {
  translation IS translation
  rotation IS rotation
  children [
    DEF HORIZONTAL_POST_TRANS Transform {
      translation 0 1.850 0
      rotation 1 0 0 1.5708
      children [
        Shape {
          appearance DEF POST_APP Appearance {
            material Material {
              diffuseColor IS postColor
              specularColor IS postColor
            }
          }
          geometry Cylinder {
            bottom FALSE
            height 2.7
            radius IS postRadius
            top FALSE
          }
        }
      ]
    }
    DEF RIGHT_POST_TRANS Transform {
      translation 0 0.95 -1.35
      children [
        Shape {
          appearance USE POST_APP
          geometry Cylinder {
            bottom FALSE
            height 1.9
            radius IS postRadius
          }
        }
      ]
    }
    DEF LEFT_POST_TRANS Transform {
      translation 0 0.95 1.35
      children [
        Shape {
          appearance USE POST_APP
          geometry Cylinder {
            bottom FALSE
            height 1.9
            radius IS postRadius
          }
        }
      ]
    }

    Shape {
      appearance Appearance {
        material Material {
          diffuseColor IS supportColor
        }
      }
      geometry IndexedFaceSet {
        coord Coordinate {
          point [
            0.05  0.4 -1.35
            0.05  0   -1.35         
            0.45  0   -1.35
            0.05  0.4  1.35
            0.05  0    1.35
            0.45  0    1.35
          ]
        }
        coordIndex [
          0, 1, 2, -1,
          2, 1, 0, -1,
          3, 4, 5, -1,
          5, 4, 3, -1
        ]
      }
    }

    Shape {
      appearance DEF NET_APP Appearance {
        texture ImageTexture {
          url "textures/net.png"
          filtering FALSE
        }
        material Material {
          diffuseColor IS netColor
          ambientIntensity 0.4
        }
      }
      geometry IndexedFaceSet {
        coord Coordinate {
          point [
            0.45 0   -1.353
            0.45 0    1.353
            0.4  1.9  1.353
            0.4  1.9 -1.353
            0.05 0    1.353
            0.05 0   -1.353
            0.05 1.9  1.353
            0.05 1.9 -1.353
          ]
        }
        texCoord TextureCoordinate {
          point [
            0 0
            28 0
            28 16
            0 16
            7 0
            7 16
            0 16
            28 0
            28 6
            0 6
          ]
        }
        coordIndex [
          0, 1, 2, 3, -1,
          3, 2, 1, 0, -1,
          1, 4, 6, 2, -1,
          2, 6, 4, 1, -1,
          0, 5, 7, 3, -1,
          3, 7, 5, 0, -1,
          2, 3, 7, 6, -1,
          6, 7, 3, 2, -1
        ]
        texCoordIndex [
          0, 1, 2, 3, -1,
          0, 1, 2, 3, -1,
          0, 4, 5, 6, -1,
          0, 4, 5, 6, -1,
          0, 4, 5, 6, -1,
          0, 4, 5, 6, -1,
          0, 7, 8, 9, -1,
          0, 7, 8, 9, -1
        ]
      }
    }


  ]
  boundingObject Group {
    children [
      USE HORIZONTAL_POST_TRANS
      USE RIGHT_POST_TRANS
      USE LEFT_POST_TRANS
      Transform {
        translation 0.2 0.4 -1.35
        children [
          DEF GOAL_SIDE_BOX Box {
            size 0.4 0.9 0.03
          }
        ]
      }
      Transform {
        translation 0.2 0.9 1.35
        children [
          USE GOAL_SIDE_BOX
        ]
      }
      Transform {
        translation 0.4 0.4 0
        rotation 0 0 1 0
        children [
          Box {
            size 0.2 0.8 2.6
          }
        ]
      }
    ]
  }
  locked IS locked
}
}
